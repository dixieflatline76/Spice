name: CI

on:
  push:
    branches-ignore: [ main ] 
  pull_request:
    branches: [ main ]
  release:
    types: [created]

jobs:
  test-and-lint:
    runs-on: windows-latest
    if: github.event_name == 'pull_request' || github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 'stable'

      - name: Cache Chocolatey packages
        uses: actions/cache@v3
        with:
          path: ~/AppData/Local/Chocolatey/lib
          key: ${{ runner.os }}-chocolatey-${{ hashFiles('**/tools.txt') }} 
          restore-keys: |
            ${{ runner.os }}-chocolatey-

      - name: Install GCC (if not cached)
        run: choco install mingw -y

      - name: Install make (if not cached)
        run: choco install make -y

      - name: Install Fyne dependencies
        run: go get fyne.io/fyne/v2/...

      - name: Install linters
        run: |
          go install golang.org/x/lint/golint@latest
          go install honnef.co/go/tools/cmd/staticcheck@latest

      - name: Run linters
        run: |
          golint ./...
          staticcheck ./... 

      - name: Run tests
        run: go test ./...

  build:
    runs-on: windows-latest
    if: github.event_name == 'pull_request' || github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 'stable'

      - name: Cache Chocolatey packages
        uses: actions/cache@v3
        with:
          path: ~/AppData/Local/Chocolatey/lib
          key: ${{ runner.os }}-chocolatey-${{ hashFiles('**/tools.txt') }}
          restore-keys: |
            ${{ runner.os }}-chocolatey-

      - name: Install GCC (if not cached)
        run: choco install mingw -y

      - name: Install make (if not cached)
        run: choco install make -y

      - name: Install Fyne dependencies
        run: go get fyne.io/fyne/v2/...

      - name: Update version.txt (if release)
        if: github.event_name == 'release'
        run: |
          echo ${{ github.event.release.tag_name }} > version.txt
          cat version.txt

      - name: Build Application
        run: make build-gui

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: spice-release-build
          path: bin/

  update-version:
    runs-on: windows-latest
    needs: build
    if: github.event_name == 'release'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Checkout main branch
        run: git checkout main

      - name: Update version.txt
        run: |
          echo ${{ github.event.release.tag_name }} > version.txt
          cat version.txt

      - name: Commit and push updated version.txt
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add version.txt
          git commit -m "Update version.txt to ${{ github.event.release.tag_name }}"
          git push origin main 
          
  release:
    runs-on: windows-latest
    needs: build 
    if: github.event_name == 'release'
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: spice-release-build

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./spice.exe   # Path to the extracted executable
          asset_name: spice-${{ github.ref_name }}.exe  # Desired name in the release
          asset_content_type: application/octet-stream
